[{"title":"Hello World","url":"/2025/04/21/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"学习计划","url":"/2025/04/23/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/","content":"每日节奏建议：\n📖 技术知识学习：1.5h\n🧱 项目回顾 &amp; 系统设计：1h\n🧠 算法训练：1h\n🎤 面试题演练：1h\n📓 总结记录：0.5h\n\n\n🗓️ 第 1 周：UIKit、Block、Runtime\n\n\n星期\n学习内容\n\n\n\n周一\nUIKit 事件传递机制 &amp; Responder Chain\n\n\n周二\nView 布局流程（layoutSubviews 等）\n\n\n周三\nBlock 分类、变量捕获与作用域\n\n\n周四\nBlock 内存管理 &amp; 循环引用分析\n\n\n周五\nObjective-C Runtime 基础结构\n\n\n周六\nRuntime 实战技巧（Swizzling、消息转发）\n\n\n周日\n复盘总结 + 输出笔记（Runtime&#x2F;Block&#x2F;UI）\n\n\n\n🗓️ 第 2 周：RunLoop、线程、内存管理\n\n\n星期\n学习内容\n\n\n\n周一\nRunLoop 构成与线程保活\n\n\n周二\nRunLoop 卡顿优化场景实战\n\n\n周三\nGCD 进阶：barrier&#x2F;group&#x2F;target queue\n\n\n周四\nGCD vs NSOperation 框架对比\n\n\n周五\nARC 本质、Weak 实现、循环引用处理\n\n\n周六\n内存泄漏排查、僵尸对象与 MRC 回顾\n\n\n周日\n总结脑图：RunLoop + 多线程 + 内存管理\n\n\n\n🗓️ 第 3 周：项目复盘 + 网络 &amp; 缓存\n\n\n星期\n学习内容\n\n\n\n周一\n主项目架构梳理 + 架构图初稿\n\n\n周二\nNSURLSession 断点续传 + 网络封装\n\n\n周三\n网络库底层：AFNetworking、Alamofire\n\n\n周四\n缓存策略 + URLProtocol 拦截\n\n\n周五\n数据持久化方案（CoreData&#x2F;SQLite）\n\n\n周六\n离线缓存架构图 + 实际场景总结\n\n\n周日\n输出：项目亮点 bullet list（10 条）\n\n\n\n🗓️ 第 4 周：架构模式 &amp; 动态化技术\n\n\n星期\n学习内容\n\n\n\n周一\nMVC&#x2F;MVVM&#x2F;VIPER&#x2F;Redux 模式总结\n\n\n周二\n模块化设计 + 路由机制实践\n\n\n周三\n跨组件通信方案（Router &#x2F; URLScheme）\n\n\n周四\n热更新方案（JSPatch &#x2F; Flutter &#x2F; RN）\n\n\n周五\n字节跳动高频架构类面试题整理\n\n\n周六\n项目架构演讲模拟\n\n\n周日\n架构图最终版 + 项目复盘文档整理\n\n\n\n🗓️ 第 5 周：系统设计 &amp; 算法进阶\n\n\n星期\n学习内容\n\n\n\n周一\n系统设计题：视频播放 App 设计\n\n\n周二\n视频缓存、异常处理模块\n\n\n周三\n图片加载优化（LRU&#x2F;异步解码）\n\n\n周四\n多线程数据一致性场景题\n\n\n周五\n启动优化 &amp; 白屏优化场景\n\n\n周六\n算法专题：滑动窗口 + 搜索类\n\n\n周日\n输出系统设计答题稿（附图+要点）\n\n\n\n🗓️ 第 6 周：真题精练 + 模拟面试\n\n\n星期\n学习内容\n\n\n\n周一\n字节跳动 iOS 面经模拟一轮\n\n\n周二\n算法 + 项目 + 系统设计自测\n\n\n周三\n面经高频题口头回答训练\n\n\n周四\n系统设计 + 框架类问题演练\n\n\n周五\n算法面试题：手写经典题\n\n\n周六\n模拟面试（可找朋友&#x2F;AI 演练）\n\n\n周日\n总结错题、面试表现复盘笔记\n\n\n\n🗓️ 第 7 周：简历打磨 + 高频回顾\n\n\n星期\n学习内容\n\n\n\n周一\n简历优化 + STAR 法项目精炼\n\n\n周二\n高频 iOS 面试题 Top20 梳理\n\n\n周三\n项目深挖回答演练\n\n\n周四\n算法每日三题（链表&#x2F;DP&#x2F;字符串）\n\n\n周五\n突破知识短板模块\n\n\n周六\n录制项目讲解 or 技术讲演视频\n\n\n周日\n总结答题话术文档 &amp; PPT 资料\n\n\n\n🗓️ 第 8 周：冲刺 &amp; 模拟演练\n\n\n星期\n学习内容\n\n\n\n周一\n快速过一遍面试 50 问\n\n\n周二\n模拟完整项目答辩演讲\n\n\n周三\n高频算法刷题（6 题冲刺）\n\n\n周四\n模拟完整面试（全流程）\n\n\n周五\n总结所有笔记 + 精选答题卡\n\n\n周六\n心态调整 &amp; 准备环境\n\n\n周日\n正式面试 day 🚀（或休息备战）\n\n\n\n"},{"title":"Day1-UIKit事件传递机制 & Responder Chain","url":"/2025/04/23/Day1-UIKit%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6-Responder-Chain/","content":"UIKit 事件传递机制 &amp; Responder Chain一、事件类型UIKit 中主要的事件类型包括：\n\n触摸事件（Touch Events）：如 tap、swipe、pinch 等。\n运动事件（Motion Events）：如摇动设备。\n远程控制事件（Remote-Control Events）：如耳机控制、CarPlay。\n按键事件（Press Events）（仅限 tvOS 或支持硬件键盘时的 iOS）。\n\n\n二、事件传递流程\n事件产生：\n\n事件由硬件（屏幕、传感器等）检测后交给系统。\niOS 将事件加入到主线程的 UIApplication 对象中进行分发。\n\n\n事件分发路径：\n\nUIApplication → UIWindow → UIView\n\n\n命中测试（Hit-Testing）：\n\n从根视图（window 的 rootView）开始递归查找目标视图。\n使用两个方法：\npoint(inside:with:)\nhitTest(_:with:)\n\n\n最终找到最合适的视图接收触摸事件。\n\n\n\n\n三、Responder Chain（响应者链）1. 什么是 Responder Chain？Responder Chain 是一条事件响应链，用来处理视图无法响应的事件。\n2. Responder Chain 构成一个 UIResponder 对象（如 UIView、UIViewController）可以传递事件给其上层响应者：UIView → UIViewController → UIWindow → UIApplication → AppDelegate\n如果某个对象无法处理事件，它会把事件传递给下一个响应者。\n3. UIResponder 方法\n\n\n方法名\n说明\n\n\n\ntouchesBegan(_:with:)\n开始触摸\n\n\ntouchesMoved(_:with:)\n触摸移动\n\n\ntouchesEnded(_:with:)\n触摸结束\n\n\ntouchesCancelled(_:with:)\n触摸被取消\n\n\n还可以通过 canBecomeFirstResponder 和 becomeFirstResponder() 控制焦点。\n\n四、自定义事件传递（常见场景）1. UIView 不响应事件可能是因为以下原因：\n\nisUserInteractionEnabled = false\nalpha &lt; 0.01\nhidden = true\n\n2. 自定义控件事件传递可重写以下方法：\n\nhitTest(_:with:)：决定谁是事件的最终响应者。\npoint(inside:with:)：判断点是否在当前视图内。\n\n\n五、Responder Chain 应用场景\n控件事件传递：如 UIButton 点击事件向上传递。\n菜单处理：如复制粘贴菜单响应。\n键盘响应管理。\n自定义事件路由（target-action 无法处理时）。\n\n\n六、调试技巧\n使用 View Debugger 检查视图层级。\n打断点调试 hitTest 和 touchesBegan。\n查看 next 属性追踪 Responder Chain。\n\n\n七、总结\nUIKit 事件从 UIApplication 开始，经过 UIWindow 最终传递给具体的 UIView。\nResponder Chain 是事件冒泡机制的实现，支持事件的多级处理。\n通过合理利用 hitTest: 和 Responder Chain，可以实现复杂交互需求。\n\n","categories":["基础"]},{"title":"Day1-两数之和","url":"/2025/04/23/Day1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","content":"🧠 算法题：两数之和（Two Sum）\n🎯 题目描述：\n给定一个整数数组 nums 和一个目标值 target，请你在数组中找出两个加起来等于目标值的数字，并返回它们的数组下标。\n你可以假设每种输入只会对应一个答案。但数组中同一个元素不能使用两遍。\n⸻\n💡 示例：\n输入: nums = [2, 7, 11, 15], target = 9输出: [0, 1] 解释: 因为 nums[0] + nums[1] == 9\n⸻\n✅ 解题要求：\t•\t时间复杂度尽量做到 O(n)\t•\t返回一组下标即可，无需考虑顺序\t•\t提供 Swift 或 Objective-C 实现\n⸻\n✨ 提示：\n你可以用哈希表记录访问过的数字及其下标，在遍历时直接判断 target - 当前值 是否存在于 map 中。\n⸻\n🚀 拓展思考（建议尝试）：\t1.\t如果要求返回所有可能的两数组合（即可能有多个答案），你会怎么做？\t2.\t如果输入是一个有序数组，你是否可以用双指针优化？\n⸻\n🔧 模板（Swift 示例）：\nfunc twoSum(_ nums: [Int], _ target: Int) -&gt; [Int] &#123;    var map = [Int: Int]()  // 记录数字和对应的下标    for (index, num) in nums.enumerated() &#123;        let complement = target - num        if let otherIndex = map[complement] &#123;            return [otherIndex, index]        &#125;        map[num] = index    &#125;    return []&#125;\n\nJS版本：\n/** * @param &#123;number[]&#125; nums * @param &#123;number&#125; target * @return &#123;number[]&#125; */var twoSum = function(nums, target) &#123;    let map = new Map();    for (let i = 0; i &lt; nums.length; i++) &#123;        let diff = target - nums[i];        if (map.has(diff)) &#123;            return [map.get(diff), i];        &#125;        map.set(nums[i], i);    &#125;&#125;;\n\n👉 LeetCode 1. 两数之和\n","categories":["算法"],"tags":["算法"]},{"title":"Day2-View 布局流程","url":"/2025/04/24/Day2-View-%E5%B8%83%E5%B1%80%E6%B5%81%E7%A8%8B/","content":"View 布局流程详解📌 一、布局流程总览iOS 的视图布局流程由 UIKit 管理，核心遵循「从父到子、从外向内」的递归更新方式。涉及的关键方法有：\n\nlayoutSubviews：真正进行子视图位置布局的地方\nsetNeedsLayout：标记视图为需要重新布局\nlayoutIfNeeded：立即强制布局\n\n布局流程如下：属性变化（如 frame）或手动触发↓调用 setNeedsLayout（标记需要布局）↓下一个 runloop 执行 layoutIfNeeded↓系统递归调用 layoutSubviews 进行布局\n\n⚙️ 二、关键方法详解1. setNeedsLayout\n作用：标记当前视图为“需要重新布局”\n调用时机：当视图状态或依赖数据变化时\n注意：不会立即执行 layoutSubviews，而是在下一个 runloop 进行布局\n\n[self.view setNeedsLayout];\n\n2. layoutIfNeeded\n作用：立即执行布局流程（如果已标记）\n常用场景：动画中强制更新 layout，确保视图状态正确  [self.view layoutIfNeeded];\n\n3. layoutSubviews\n作用：布局子视图，子类通过重写此方法来自定义布局逻辑\n调用方式：系统自动调用，或通过 layoutIfNeeded 间接触发  - (void)layoutSubviews &#123;    [super layoutSubviews];    self.label.frame = CGRectMake(10, 10, 100, 40);&#125;\n\n🕒 三、布局触发时机布局流程会在以下情况下自动触发：\n\n视图初始化完成后首次添加到视图层级中\nframe &#x2F; bounds &#x2F; center 属性改变\n调用 setNeedsLayout + layoutIfNeeded\n屏幕旋转、设备方向变化\nAuto Layout 约束变化\n\n🔁 四、Auto Layout 参与布局流程当使用 Auto Layout（自动布局）时：\n\n不推荐在 layoutSubviews 中设置 frame\n更新约束应在 updateConstraints 方法中完成\nupdateConstraints → layoutSubviews → drawRect 是完整的调用链  - (void)updateConstraints &#123;    // 更新约束    [super updateConstraints];&#125;\n\n🧱 五、UIView 与 CALayer 的关系\n每个 UIView 都有一个对应的 CALayer\nUIView.frame 实际上是操作 CALayer.frame\n布局本质上是在更新图层的属性  NSLog(@&quot;%@&quot;, NSStringFromCGRect(self.view.layer.frame));\n\n📐 六、文字版布局流程图[视图属性变更]      ↓[setNeedsLayout] → 标记布局      ↓[下一个 runloop]      ↓[layoutIfNeeded] → 判断并触发布局      ↓[layoutSubviews] → 更新子视图 frame\n\n🎯 七、面试高频问题整理Q1：layoutSubviews 和 drawRect 有什么区别？\nlayoutSubviews：用于更新子视图的布局\ndrawRect：用于自定义视图绘图（如 Core Graphics）\n\nQ2：如何立即触发布局？[self.view setNeedsLayout];[self.view layoutIfNeeded];\n\nQ3：什么时候会调用 layoutSubviews？\n添加到父视图后\nframe 改变\nsetNeedsLayout + layoutIfNeeded\nAuto Layout 触发\n\nQ4：如何在动画中确保布局生效？[UIView animateWithDuration:0.3 animations:^&#123;    // 修改布局前置条件    [self.view layoutIfNeeded]; // 强制立即布局&#125;];\n\n📚 八、参考资料\nApple Developer 文档：UIView Class Reference\n官方指南：View Programming Guide for iOS\n\n","categories":["基础"]},{"title":"Day2-用栈实现队列","url":"/2025/04/24/Day2-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/","content":"🧠 算法题：用栈实现队列（LeetCode 232）\n🔗 LeetCode 232 - Implement Queue using Stacks\n📌 题目描述：\n使用两个栈 stackIn 和 stackOut 实现一个队列，支持以下操作：\n\npush(x)：将元素 x 推到队列的末尾\npop()：移除队列开头的元素并返回\npeek()：返回队列开头的元素\nempty()：返回队列是否为空\n\n要求：只能使用栈的标准操作（push, pop, peek, empty）\n⸻\n💡 解题思路：\n\n入队操作（push）直接往 stackIn 中加元素；\n出队操作（pop 或 peek）时，如果 stackOut 为空，则将 stackIn 中的所有元素倒序转移到 stackOut；\n保证先进先出（FIFO）的顺序。\n\n⸻\n✅ JavaScript 实现：\nvar MyQueue = function () &#123;    this.stackIn = [];    this.stackOut = [];&#125;;MyQueue.prototype.push = function (x) &#123;    this.stackIn.push(x);&#125;;MyQueue.prototype.pop = function () &#123;    if (this.stackOut.length === 0) &#123;        while (this.stackIn.length) &#123;            this.stackOut.push(this.stackIn.pop());        &#125;    &#125;    return this.stackOut.pop();&#125;;MyQueue.prototype.peek = function () &#123;    if (this.stackOut.length === 0) &#123;        while (this.stackIn.length) &#123;            this.stackOut.push(this.stackIn.pop());        &#125;    &#125;    return this.stackOut[this.stackOut.length - 1];&#125;;MyQueue.prototype.empty = function () &#123;    return this.stackIn.length === 0 &amp;&amp; this.stackOut.length === 0;&#125;;\n\n\n⸻\n🧠 思考拓展：\n\n如果反过来是“用队列实现栈”应该怎么做？👉 LeetCode 225\n队列相关拓展题：滑动窗口最大值、最小栈等\n\n","categories":["算法"],"tags":["算法"]}]